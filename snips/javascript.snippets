###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet '': "event string"
'${1:click #element}': '${2:onElementClick}'${3:,}$0
endsnippet

snippet "": "event string 2"
"${1:click #element}": "${2:onElementClick}"${3:,}$0
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function (element) {
	$0
}${10:,}
endsnippet

snippet = "Assignment"
${1:name} = ${2:value}${3:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function (${3:attribute}) {
	$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}:${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:,}
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function (${3:first_argument}) {
	${0:// body...}
};
 
endsnippet

snippet cl "Console Log"
console.log(${1});$0
endsnippet

snippet ci "Console Info"
console.info(${1});$0
endsnippet

snippet v "var"
var ${1:name} = ${2:value};$0
endsnippet

snippet for "for (...) {...} (faster)"
for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2--){
	${3:$1[$2]}$0
};
endsnippet

snippet for "for (...) {...}"
for (var ${2:i}=0; $2 < ${1:Things}.length; $2++) {
	${3:$1[$2]}$0
};
endsnippet

snippet fun "function (fun)" w
function ${1:function_name} (${2:argument}) {
	${0}
}${3}
endsnippet

snippet ife "if ___ else"
if (${1:condition}) {
    ${2://code}
} else {
    ${3://code}
}
endsnippet

snippet if "if"
if (${1:condition}) {
    ${0://code}
}
endsnippet

snippet elif "else if"
else if (${1:condition}) {
  ${0}
}
endsnippet

snippet el "else"
else {
  ${0}
}
endsnippet

snippet timeout "setTimeout function"
setTimeout(function () {$0}${2:}, ${1:10});
endsnippet

snippet ex "module exports"
module.exports.${1:name} = ${0}
endsnippet

snippet in "inspect"
require('eyes').inspect(${1});$0
endsnippet

snippet fe "for each"
${1:list}.forEach(function (${2:item}) {
    ${3://code}
});${0}
endsnippet

snippet map "map"
${1:list}.map(function (${2:item}) {
    ${3://code}
});${0}
endsnippet

snippet re "module require"
${1:name} = require('${2:$1}')${0}
endsnippet

snippet sw "switch block"
switch (${1:option}) {
    ${0://code}
}
endsnippet

snippet ca "switch case"
case ${1:name}:
    ${2://code}
    break;${0}
endsnippet

snippet td "todo"
// TODO: ${0}
endsnippet

snippet sfy "JSON.stringify" w
JSON.stringify(${1})${0}
endsnippet

snippet be "before each"
beforeEach(function (${1:done}) {
	$0
});
endsnippet

snippet wh "while loop"
while (${1:true}) {
	$0
}
endsnippet

snippet de "describe"
describe('${1}', function (${2:done}) {
  ${0}
});
endsnippet

snippet it "test case"
it('${1}', function (${2:done}) {
  ${0}
});
endsnippet

snippet ade "assert.deepEqual"
assert.deepEqual(${1:actual}, ${2:expected});${0}
endsnippet

snippet ase "assert.strictEqual"
assert.strictEqual(${1:actual}, ${2:expected});${0}
endsnippet

snippet aeq "assert.equal"
assert.equal(${1:actual}, ${2:expected});${0}
endsnippet

snippet ath "assert.throws"
assert.throws(${1:block}, ${2:error});${0}
endsnippet

snippet ust "use strict"
'use strict';$0
endsnippet

# JSDoc snippets

snippet jd "A JSDoc comment" b
/**
 * ${1:${VISUAL}}$0
 */
endsnippet

snippet @au "@author email (First Last)"
@author ${1:`!v g:snips_author`} [${2:`!v g:snips_author_email`}]
endsnippet

snippet @li "@license Description"
@license ${1:MIT}$0
endsnippet

snippet @ver "@version Semantic version"
@version ${1:0.1.0}$0
endsnippet

snippet @fileo "@fileoverview Description" b
/**
 * @fileoverview ${1:${VISUAL:A description of the file}}$0
 */
endsnippet

snippet @ct "@constructor"
@constructor
endsnippet

snippet jp "@param {Type} varname Description"
@param {${1:Type}} ${2:varname} ${3:Description}
endsnippet

snippet jre "@return {Type} Description"
@return {${1:Type}} ${2:Description}
endsnippet

snippet jpr "@private"
@private
endsnippet

snippet @over "@override"
@override
endsnippet

snippet @pro "@protected"
@protected
endsnippet
# vim:ft=snippets:
